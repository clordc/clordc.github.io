<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Chatgpt本地部署</title>
    <url>/2023/11/16/Chatgpt%E6%9C%AC%E5%9C%B0%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>About me</title>
    <url>/2023/05/07/About-me/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>P4入门（一）</title>
    <url>/2023/05/29/P4%E5%85%A5%E9%97%A8%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<h1 id="P4入门（一）"><a href="#P4入门（一）" class="headerlink" title="P4入门（一）"></a>P4入门（一）</h1><h2 id="PISA和openflow"><a href="#PISA和openflow" class="headerlink" title="PISA和openflow"></a>PISA和openflow</h2><p>openflow和P4都基于Programmable Hardwares（可编程硬件）的理念。openflow是再Control Plane（控制层）实时改写switch和router上的路由表。但是openflow存在许多问题，于是Protocol Independent Switch Architecture（PISA）诞生，从更底层入手把packet的转发最基础的过程高度抽象化，消除了openflow存在的很多问题。它的图示如下:<br><img src="https://raw.githubusercontent.com/clordc/blogImage/master/images/20230527101427.png" alt="PISA"></p>
<h2 id="P4简介"><a href="#P4简介" class="headerlink" title="P4简介"></a>P4简介</h2><p>P4是一种类似C语言的静态语言。代码文件的基本样式如下：<br><img src="https://raw.githubusercontent.com/clordc/blogImage/master/images/20230527101940.png" alt="20230527101940"></p>
<ul>
<li>Libraries: 类似C语言的库文件;</li>
<li>Declarations：定义基本数据结构，支持typedef;</li>
<li>Parse packet headers：放置解析headers的代码;</li>
<li>Control flow：代码的逻辑部分，定义Match-Action functions，按照定义的规则修改网络包里的内容（这里只有Ingress部分，还会有Egress部分）;</li>
<li>Assemble: Deparser部分把前面修改好的部分重新组装为一个新的packet转发;</li>
<li>main: 将定义好的部分按正确的顺序调用<ul>
<li>一般为三段式：Parser-&gt;Match-Action Pipeline-&gt;Deparser</li>
</ul>
</li>
</ul>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>本篇简单介绍了P4的背景，架构，它的出现就是方便我们在不那么“灵活”的硬件上编写自己设计的“灵活”protocol。</p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2024/12/23/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>使用 Helm 编写 Kubernetes 部署脚本并验证 Service Account 权限</title>
    <url>/2024/12/24/%E4%BD%BF%E7%94%A8%20Helm%20%E7%BC%96%E5%86%99%20Kubernetes%20%E9%83%A8%E7%BD%B2%E8%84%9A%E6%9C%AC%E5%B9%B6%E9%AA%8C%E8%AF%81%20Service%20Account%20%E6%9D%83%E9%99%90/</url>
    <content><![CDATA[<h1 id="使用-Helm-编写-Kubernetes-部署脚本并验证-Service-Account-权限"><a href="#使用-Helm-编写-Kubernetes-部署脚本并验证-Service-Account-权限" class="headerlink" title="使用 Helm 编写 Kubernetes 部署脚本并验证 Service Account 权限"></a>使用 Helm 编写 Kubernetes 部署脚本并验证 Service Account 权限</h1><p>在这篇博客中，我将复盘从头开始编写一个 Helm Chart，并通过在 Kubernetes 集群中运行带有 <code>kubectl</code> 二进制文件的 Docker 镜像来验证 Service Account 的权限。任务的目标是使用 Helm 部署一个带有 <code>kubectl</code> 的容器，并验证其 Service Account 是否具有对 Pods 资源的访问权限。</p>
<h2 id="任务背景"><a href="#任务背景" class="headerlink" title="任务背景"></a>任务背景</h2><p>我们的任务是编写一个 Helm Chart，并部署一个包含 <code>kubectl</code> 的容器镜像。通过这个容器，我们可以直接在 Kubernetes 中运行 <code>kubectl</code> 命令来验证 <code>ServiceAccount</code> 权限。为了确保容器正常运行，我们通过 <code>sleep</code> 命令将其守护化。</p>
<h3 id="步骤概述"><a href="#步骤概述" class="headerlink" title="步骤概述"></a>步骤概述</h3><ol>
<li><strong>编写 Helm Chart</strong>：我们需要创建 <code>Chart.yaml</code>、<code>deployment.yaml</code>、<code>role.yaml</code>、<code>rolebindings.yaml</code>、<code>values.yaml</code> 等 Helm Chart 文件来定义 Kubernetes 资源的配置。</li>
<li><strong>部署 Helm Chart</strong>：将 Helm Chart 部署到 Kubernetes 集群中，并启动一个包含 <code>kubectl</code> 的 Docker 镜像。</li>
<li><strong>验证权限</strong>：验证通过 Helm 部署的 Service Account 是否能够访问 Pods 资源。</li>
</ol>
<h2 id="任务细节"><a href="#任务细节" class="headerlink" title="任务细节"></a>任务细节</h2><h3 id="1-编写-Helm-Chart"><a href="#1-编写-Helm-Chart" class="headerlink" title="1. 编写 Helm Chart"></a>1. 编写 Helm Chart</h3><h4 id="Chart-yaml"><a href="#Chart-yaml" class="headerlink" title="Chart.yaml"></a>Chart.yaml</h4><p><code>Chart.yaml</code> 是 Helm Chart 的元数据文件，包含了 Chart 的名称、版本和描述等信息。我们创建了如下的 <code>Chart.yaml</code> 文件：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v2</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-image</span><br><span class="hljs-attr">description:</span> <span class="hljs-string">A</span> <span class="hljs-string">Helm</span> <span class="hljs-string">chart</span> <span class="hljs-string">for</span> <span class="hljs-string">kubectl-image</span> <span class="hljs-string">deployment</span><br><span class="hljs-attr">version:</span> <span class="hljs-number">0.1</span><span class="hljs-number">.0</span><br></code></pre></td></tr></table></figure>
<p>这个文件指定了 Helm Chart 的基本信息。</p>
<h4 id="deployment-yaml"><a href="#deployment-yaml" class="headerlink" title="deployment.yaml"></a>deployment.yaml</h4><p><code>deployment.yaml</code>定义了 Kubernetes 的 <code>Deployment</code> 资源，它控制着容器的部署与运行。我们在 <code>deployment.yaml</code> 文件中设置了一个包含 <code>kubectl</code> 的容器，并通过 <code>sleep</code> 命令保持容器运行。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-deployment</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">kubectl-image</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">kubectl-image</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-container</span><br>          <span class="hljs-attr">image:</span> <span class="hljs-string">&quot;<span class="hljs-template-variable">&#123;&#123; .Values.image.repository &#125;&#125;</span>:<span class="hljs-template-variable">&#123;&#123; .Values.image.tag &#125;&#125;</span>&quot;</span><br>          <span class="hljs-attr">command:</span> [<span class="hljs-string">&quot;sleep&quot;</span>, <span class="hljs-string">&quot;3600&quot;</span>]  <span class="hljs-comment"># 用于保持容器运行</span><br>          <span class="hljs-attr">imagePullPolicy:</span> <span class="hljs-string">Always</span><br>      <span class="hljs-attr">serviceAccountName:</span> <span class="hljs-string">kubectl-service-account</span>  <span class="hljs-comment"># 使用服务账户</span><br>      <span class="hljs-attr">imagePullSecrets:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">my-registry-secret</span><br></code></pre></td></tr></table></figure>
<p>在这个配置中，我们使用了 <code>serviceAccountName</code> 来指定容器应该使用的 Service Account（<code>kubectl-service-account</code>）。同时，<code>command</code> 使用 <code>sleep 3600</code> 来保证容器持续运行。</p>
<h4 id="role-yaml"><a href="#role-yaml" class="headerlink" title="role.yaml"></a>role.yaml</h4><p><code>role.yaml</code> 定义了一个 Role，允许它对 <code>pods</code> 资源执行基本的操作（如列出、查看、创建、更新、删除）。这个 Role 将赋予我们的 Service Account 相关的权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-role</span><br><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">apiGroups:</span> [<span class="hljs-string">&quot;&quot;</span>]<br>    <span class="hljs-attr">resources:</span> [<span class="hljs-string">&quot;pods&quot;</span>]<br>    <span class="hljs-attr">verbs:</span> [<span class="hljs-string">&quot;list&quot;</span>, <span class="hljs-string">&quot;get&quot;</span>, <span class="hljs-string">&quot;create&quot;</span>, <span class="hljs-string">&quot;update&quot;</span>, <span class="hljs-string">&quot;delete&quot;</span>]<br></code></pre></td></tr></table></figure>
<h4 id="rolebindings-yaml"><a href="#rolebindings-yaml" class="headerlink" title="rolebindings.yaml"></a>rolebindings.yaml</h4><p><code>rolebindings.yaml</code> 文件将 <code>Role</code> 与我们的 <code>ServiceAccount</code> 关联起来，确保 <code>kubectl-service-account</code> 拥有对 <code>pods</code> 的权限。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">rbac.authorization.k8s.io/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">RoleBinding</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-role-binding</span><br>  <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">subjects:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">kind:</span> <span class="hljs-string">ServiceAccount</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-service-account</span><br>    <span class="hljs-attr">namespace:</span> <span class="hljs-string">default</span><br><span class="hljs-attr">roleRef:</span><br>  <span class="hljs-attr">kind:</span> <span class="hljs-string">Role</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-role</span><br>  <span class="hljs-attr">apiGroup:</span> <span class="hljs-string">rbac.authorization.k8s.io</span><br></code></pre></td></tr></table></figure>
<h4 id="values-yaml"><a href="#values-yaml" class="headerlink" title="values.yaml"></a>values.yaml</h4><p><code>values.yaml</code> 文件用于定义 Helm Chart 的默认值。我们设置了容器镜像的默认仓库和标签，以及服务账户的相关配置.</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">image:</span><br>  <span class="hljs-attr">repository:</span> <span class="hljs-string">build-releases-external.common.repositories.cloud.sap/bitnami/kubectl</span><br>  <span class="hljs-attr">tag:</span> <span class="hljs-string">latest</span><br><span class="hljs-attr">service:</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-number">8080</span><br><span class="hljs-attr">serviceAccount:</span><br>  <span class="hljs-attr">create:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">kubectl-service-account</span><br>  <span class="hljs-attr">automount:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">ingress:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br><span class="hljs-attr">autoscaling:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure>
<h3 id="2-部署-Helm-Chart"><a href="#2-部署-Helm-Chart" class="headerlink" title="2.部署 Helm Chart"></a>2.部署 Helm Chart</h3><p>完成 Helm Chart 的编写后，我们使用以下命令在 Kubernetes 集群中部署它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">helm install kubectl-image ./mychart<br></code></pre></td></tr></table></figure>
<p>这个命令将 Helm Chart 部署到 Kubernetes 集群，并启动一个带有 <code>kubectl</code> 的容器。容器运行后，我们就可以验证配置的权限。</p>
<h3 id="3-验证-Service-Account-权限"><a href="#3-验证-Service-Account-权限" class="headerlink" title="3.验证 Service Account 权限"></a>3.验证 Service Account 权限</h3><p>为了验证 <code>kubectl-service-account</code> 是否具有访问 Pods 的权限，我们进入容器并尝试运行一些 <code>kubectl</code> 命令。以下是我们执行的步骤：</p>
<ol>
<li>进入容器: 我们使用 <code>kubectl exec</code> 命令进入容器：<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kubectl <span class="hljs-built_in">exec</span> -it kubectl-deployment-xxxx -- /bin/bash<br></code></pre></td></tr></table></figure></li>
<li>验证权限： 在容器中，我们运行以下 <code>kubectl</code> 命令来验证 Service Account 的权限：</li>
</ol>
<ul>
<li>列出Pods:<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kubectl get pods<br></code></pre></td></tr></table></figure></li>
<li>获取Pod的详细信息：<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kubectl describe pod &lt;pod-name&gt;<br></code></pre></td></tr></table></figure></li>
<li>创建、更新或删除 Pod：<figure class="highlight bash"><table><tr><td class="code"><pre><code class="hljs bash">kubectl delete pod &lt;pod-name&gt;<br></code></pre></td></tr></table></figure>
由于我们的 <code>kubectl-service-account</code> 仅被授予了对 <code>pods</code> 资源的权限，它能够执行与 Pods 相关的操作，但无法执行与其他 Kubernetes 资源（如 Deployments、Services 等）相关的操作。</li>
</ul>
<h4 id="总结与反思"><a href="#总结与反思" class="headerlink" title="总结与反思"></a>总结与反思</h4><p>在本次任务中，我们成功地使用 Helm 编写了一个 Kubernetes 部署脚本，并验证了通过 Service Account 控制访问权限的方式。通过部署带有 kubectl 的容器并验证 Service Account，我们确保了权限的配置是正确的，且容器能够正常使用 kubectl 命令与 Kubernetes 集群交互。</p>
<p>这次任务让我深入了解了如何使用 Helm 进行 Kubernetes 资源的自动化管理，如何配置 RBAC（Role-Based Access Control）以精细化管理 Service Account 的权限，并且加深了对 Helm Chart 工作原理和 Kubernetes 部署流程的理解。</p>
<p>如果你有类似的需求，使用 Helm 来管理 Kubernetes 配置和部署非常方便，可以有效地简化集群资源的管理和维护过程。</p>
]]></content>
  </entry>
</search>
